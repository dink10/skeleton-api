@Library('gismart-devops')
import org.gismart.DevOps
z = new org.gismart.DevOps()
envSelector = new org.gismart.SubscriptionTool()

imageName = '978577353296.dkr.ecr.eu-west-1.amazonaws.com/subscriptiontool'

def deployDev() {
    node("awscli") {
        stage("Deploy Dev") {
            z.deployApp('devops1','devops1-default-eks','devops1-default-subscriptiontool','k8s/configmaps/develop/custom.yaml')
            z.applyDbMigration('devops1','devops1-default-eks','devops1-default-subscriptiontool','k8s/yaml_migration.yaml','1800s')
            z.deployApp('devops1','devops1-default-eks','devops1-default-subscriptiontool','k8s/yaml_app.yaml')

            sh "kubectl scale --replicas=1 -f k8s/yaml_app.yaml "

            sh "sleep 30; kubectl get po -n devops1-default-subscriptiontool"
        }
    }
}

def deployStage() {
    node("awscli") {
        stage("Deploy Stageing") {
            z.deployApp('prod','prod-defaulting-eks','prod-stageing-subscriptiontool','k8s/configmaps/stage/custom.yaml')
            z.applyDbMigration('prod','prod-defaulting-eks','prod-stageing-subscriptiontool','k8s/yaml_migration.yaml','1800s')
            z.deployApp('prod','prod-defaulting-eks','prod-stageing-subscriptiontool','k8s/yaml_app.yaml')

            sh "sleep 30; kubectl get po -n prod-stageing-subscriptiontool"
        }
    }
}

def deployPreProd() {
    node("awscli") {
        stage("Deploy Pre-Prod") {
            echo "Replicating DB from prod"
            z.migrateDbFromUpstream('prod','prod-defaulting-eks','prod-defaulting-subscriptiontool','prod-preprod-subscriptiontool')
            z.deployApp('prod','prod-defaulting-eks','prod-preprod-subscriptiontool','k8s/configmaps/preprod/custom.yaml')
            z.applyDbMigration('prod','prod-defaulting-eks','prod-preprod-subscriptiontool','k8s/yaml_migration.yaml','1800s')
            sh "aws s3 rm s3://prod-preprod-subscriptiontool/ --recursive --profile prod"
            sh "aws s3 cp s3://prod-defaulting-subscriptiontool/ s3://prod-preprod-subscriptiontool --recursive --profile prod --acl public-read"
            z.deployApp('prod','prod-defaulting-eks','prod-preprod-subscriptiontool','k8s/yaml_app.yaml')

            sh "sleep 30; kubectl get po -n prod-preprod-subscriptiontool"
        }
    }
}

def deployProd() {
    node("awscli") {
        stage("Deploy Prod") {
            z.deployApp('prod','prod-defaulting-eks','prod-defaulting-subscriptiontool','k8s/configmaps/prod/custom.yaml')
            z.applyDbMigration('prod','prod-defaulting-eks','prod-defaulting-subscriptiontool','k8s/yaml_migration.yaml','1800s')
            z.deployApp('prod','prod-defaulting-eks','prod-defaulting-subscriptiontool','k8s/yaml_app.yaml')

            sh "sleep 30; kubectl get po -n prod-defaulting-subscriptiontool"
        }
    }
}

node("awscli") {
    stage("Checkout") {
        checkout scm
    }
    stage("Build"){
       sh 'git status'
       latestImageTag = z.buildImage()
       z.promoteImage(imageName,latestImageTag,'latest')
    }
    stage("Replace tag") {
        sh 'pwd; ls -lah; git status'
        z.replaceImage('k8s/yaml_app.yaml',latestImageTag)
        z.replaceImage('k8s/yaml_migration.yaml',latestImageTag)
    }
    stage("Choose environment to deploy") {
        deployAppEnv = envSelector.selectEnvironment()
        echo "Deploying ${deployAppEnv}"
    }
}

switch(deployAppEnv) {
    case "devops1-default-subscriptiontool":
        deployDev()
        break
    case "prod-stageing-subscriptiontool":
        deployStage()
        stage('Approve stage environment'){
            input "Is Staging ok?"
        }
        node("awscli") {
            z.promoteImage(imageName,latestImageTag,'stage')
        }
        break
    case "prod-defaulting-subscriptiontool":
        deployStage()
        stage('Approve stage environment'){
            input "Is Staging ok?"
        }
        node("awscli") {
            z.promoteImage(imageName,latestImageTag,'stage')
        }
        deployProd()
        stage('Approve prod environment'){
           input "Is Production ok?"
        }
        node("awscli") {
            z.promoteImage(imageName,latestImageTag,'prod')
        }
        break
    case "prod-preprod-subscriptiontool":
        deployPreProd()
        break
}
